#!/usr/bin/env python
"""
Manages topic branches in a git workflow

Basic usage example:
% gitopic --list
% gitopic --open Add_bells_and_whistles
% gitopic --update
% gitopic --close

Use the --help option for usage info. Install by copying into /usr/local/bin or somewhere similar.

Created 4-Apr-2012 by David Kirkby (University of California, Irvine) <dkirkby@uci.edu>
"""

import subprocess
from optparse import OptionParser
import shlex
import time
import os.path

# Parse the command-line.
parser = OptionParser(usage="usage: %prog [options]")
parser.add_option("-l", "--list", action="store_true", dest="list", default=False,
    help="list all topic branches")
parser.add_option("--log", action="store_true", dest="log", default=False,
    help="show log of completed topic branches")
parser.add_option("--open", action="store", dest="newname", default=None,
    help="open a new topic branch with the specified name")
parser.add_option("--close", action="store", dest="docfile", default=None,
    help="close the current topic branch using the specified file to document the changes")
parser.add_option("--update", action="store_true", dest="update", default=False,
    help="update the current topic branches with changes to master")
parser.add_option("--offline", action="store_true", dest="offline", default=False,
    help="do not attempt any communication with the remote repository")
parser.add_option("-d", "--debug", action="store_true", dest="debug", default=False,
    help="display git commands being executed with prefix >>")
parser.add_option("-o", "--origin", action="store", dest="remote", default="origin",
    help="alias of remote repository to use")
parser.add_option("--git-dir", action="store", dest="gitdir", default=None,
    help="directory path to the repository")

(options,args) = parser.parse_args()

class git:
    """
    Manages the execution of a single git command via a subprocess. If an exitOnErrorMsg
    keyword is specified, prints the message and exits if the subprocess return code is non-zero.
    """
    def __init__(self,*gitargs,**kwargs):
        """
        Calls git with the specified args
        """
        argv = ['git']
        if options.gitdir:
            argv.append('--git-dir=%s/.git' % options.gitdir)
        argv.extend(gitargs)
        if options.debug:
            print ">> %s" % ' '.join(argv)
        handler = subprocess.Popen(argv,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        (self.stdout,self.stderr) = handler.communicate()
        if 'exitOnErrorMsg' in kwargs and handler.returncode != 0:
            print "gitopic: %s" % kwargs['exitOnErrorMsg']
            exit(-1)
        self.returncode = handler.returncode

def span(relative,child):
    """
    Returns the number of commits between the common ancestor of (relative,child) and child,
    or zero if child is a parent of or equal to relative.
    """
    history = git('rev-list','%s..%s' % (relative,child),
        exitOnErrorMsg="unable to examine revision history.")
    return history.stdout.count('\n')

def exists(refname):
    """
    Returns True if the fully qualified reference name exists, or else returns False.
    """
    found = git('show-ref','--quiet','--verify',refname)
    return (0 == found.returncode)

def master():
    """
    Checks out the master branch and updates it from the remote repository if necessary.
    """
    # checkout the master branch
    git('checkout','master',exitOnErrorMsg="unable to checkout master.")
    # update the local master branch, if necessary
    if span('master','%s/master' % options.remote) > 0:
        git('merge','--ff-only','%s/master' % options.remote,
            exitOnErrorMsg="unable to fast-forward local master")

# Look up current branch name (if this fails, we are probably not in a git repo or else we
# have uncommitted changes due to a failed --update).
head=git('symbolic-ref','HEAD',
    exitOnErrorMsg="unable to get current branch name. Are you in a git repository directory?")
currentBranch = head.stdout.strip().replace('refs/heads/','')

# Fetch any updates from the remote repository (if this fails, we are probably offline)
if not options.offline:
    git('fetch','--prune',
        exitOnErrorMsg="unable to fetch remote updates. Use --offline if you are offline.")

# Check that the local master is not ahead of the remote
ahead = span('%s/master' % options.remote,'master')
if ahead > 0:
    print 'YOUR MASTER BRANCH IS %d COMMITS AHEAD OF THE REMOTE. YOU NEED TO FIX THIS.' % ahead
    exit(-1)

# List all topic branches, if requested.
if options.list:
    branches = git('for-each-ref','--shell','--sort=-committerdate',
        '--format="%(objecttype) %(objectname) %(refname) %(committerdate:relative) %(committername)"',
        exitOnErrorMsg="unable to browse branches.")
    localBranches = [ ]
    remoteBranches = [ ]
    remotePrefix = "refs/remotes/%s/" % options.remote
    for line in branches.stdout.split('\n'):
        tokens = shlex.split(line[1:-1])
        if len(tokens) > 0 and tokens[0] == 'commit':
            (sha1,refname,when,who) = tokens[1:]
            if refname.endswith('/master'):
                continue
            if refname.startswith(remotePrefix):
                suffix = " [%+d,%-d]" % (span('%s/master' % options.remote,refname),
                    -span(refname,'%s/master' % options.remote))
                refname = refname.replace(remotePrefix,"")
                remoteBranches.append([sha1,who,when,refname+suffix])
            elif refname.startswith('refs/heads/'):
                suffix = " [%+d,%-d]" % (span('master',refname),-span(refname,'master'))
                refname = refname.replace("refs/heads/","")
                if refname == currentBranch:
                    suffix += "*"
                localBranches.append([sha1,who,when,refname+suffix])
    print '\n== Local topic branches ==\n'
    for branch in localBranches:
        print "%20s, %14s: %s" % tuple(branch[1:])
    print '\n== Remote topic branches ==\n'
    for branch in remoteBranches:
        print "%20s, %14s: %s" % tuple(branch[1:])
    print
    exit(0)

# Show log of completed topic branches, if requested.
if options.log:
    log = git('rev-list','--merges',
        '--format="%at<##>%cn<##>%s"<!!>',"%s/master" % options.remote,
        exitOnErrorMsg="unable to access commit log.")
    for line in log.stdout.split('<!!>\n'):
        rows = line.split('\n')
        if rows[0].startswith('commit'):
            tokens = rows[1][1:-1].split("<##>")
            when = time.strftime("%d-%b-%Y",time.localtime(float(tokens[0])))
            who = tokens[1]
            what = tokens[2].split('\n')[0]
            print "%s, %s: %s" % (when,who,what)
    exit(0)

# Open a new topic branch, if requested.
if options.newname:
    # check for a valid branch name
    valid = git('check-ref-format','/refs/heads/%s' % options.newname)
    if valid.returncode != 0:
        print "gitopic: invalid topic branch name '%s'" % options.newname
        exit(-1)
    # check that this branch does not already exist
    if (exists('refs/heads/%s' % options.newname) or
        exists('refs/remotes/%s/%s' % (options.remote,options.newname))):
        print "gitopic: topic branch already exists for '%s'" % options.newname
        exit(-1)
    # checkout the master branch, updating if necessary
    master()
    # create the new branch and make it current
    git('checkout','-b',options.newname)
    # push the new branch ref to the remote repo
    pushArgs = ['push',options.remote,options.newname]
    if not options.offline:
        git(*pushArgs,exitOnErrorMsg="unable to push new branch to remote repository.")
    print "Created topic branch '%s'" % options.newname
    if options.offline:
        print "Use the following command the next time you are online: git",' '.join(pushArgs)
    exit(0)

# Closes the current topic branch, if requested.
if options.docfile:
    # check that we have a valid documentation file
    if not os.path.isfile(options.docfile):
        print 'gitopic: no such docfile:',options.docfile
        exit(-1)
    # check that we are synched with the master branch
    behind = span(currentBranch,'%s/master' % options.remote)
    if behind > 0:
        print 'gitopic: you need to --update your topic branch before you can --close it.'
        exit(-1)
    # checkout the master branch, updating if necessary
    master()
    # perform a no-fast-forward merge
    git('merge','--no-ff',currentBranch,exitOnErrorMsg="unable to merge topic branch back to master.")
    # ammend the merge commit message with our docfile
    git('commit','--amend','--file',options.docfile,
        exitOnErrorMsg="unable to ammend merge commmit with docfile.")
    # delete the topic branch
    git('branch','-d',currentBranch)
    # push changes back to the remote repo
    pushArgs = ['push',options.remote,'master:master',':%s' % currentBranch]
    if not options.offline:
        git(*pushArgs,exitOnErrorMsg="unable to push changes to remote repository.")
    print "Closed topic branch '%s'" % currentBranch
    if options.offline:
        print "Use the following command the next time you are online: git",' '.join(pushArgs)
    exit(0)

# Synchronize the current topic branch with changes to master, if requested.
if options.update:
    # are we actually out of synch?
    behind = span(currentBranch,'%s/master' % options.remote)
    if behind == 0:
        print "gitopic: '%s' is already up to date." % currentBranch
        exit(0)
    # checkout the master branch, updating if necessary
    master()
    # now do the rebase
    pushArgs = ['push','--force',options.remote,currentBranch]
    rebase = git('rebase','master',currentBranch)
    if rebase.returncode != 0:
        print "gitopic: update found a merge conflict:\n"
        print rebase.stdout
        print "gitopic: when the rebase is complete, do: git",' '.join(pushArgs)
        exit(-1)
    if not options.offline:
        git(*pushArgs,exitOnErrorMsg="unable to push changes to remote repository.")
    print "Successfully updated topic branch '%s'" % currentBranch
    if options.offline:
        print "Use the following command the next time you are online: git",' '.join(pushArgs)
